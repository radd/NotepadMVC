/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.radd.view;

import io.github.radd.controller.NoteController;
import io.github.radd.model.NoteModel;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Piotr
 */
public class MainFrame extends javax.swing.JFrame implements Observer {

    private NoteController controller;
    private NoteModel model;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }
    
    
    public MainFrame(NoteController c, NoteModel m) {
        controller = c;
        model = m;
        
        //Add observer (this view) to model
        ((Observable) model).addObserver(this);
        
        initComponents();
        setTitle("Notepad");
    }
    
    public void showView() {
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        docScrollPane = new javax.swing.JScrollPane();
        docTextPane = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        docScrollPane.setBorder(null);

        docTextPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 4, 4, 3));
        docTextPane.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        docScrollPane.setViewportView(docTextPane);

        fileMenu.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(docScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(docScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        openFile();
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void openFile() {
        String path = model.getOpenFilePath();
        JFileChooser chooser = new JFileChooser(path);
	chooser.setFileFilter(model.getFileFilter());
        chooser.setAcceptAllFileFilterUsed(false);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) { 
            controller.setFile(chooser.getSelectedFile());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane docScrollPane;
    private javax.swing.JTextPane docTextPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void update(Observable o, Object arg) {
        NoteModel.Action action = (NoteModel.Action) arg;
        System.out.println("update: " + action);
        
        switch(action) {
            case OPEN_FILE: showFile(); break;
            case OPEN_ERROR: showErrorMessage(model.getErrorMsg()); break;
        }
    }
    
    private void showErrorMessage(String msg) {
        JOptionPane.showMessageDialog(this,
                msg,
                "Error",
                JOptionPane.ERROR_MESSAGE); 
    }

    private void showFile() {
        docTextPane.setText(model.getFileContent());
        
        //Scroll to top
        docTextPane.setCaretPosition(0);  
    }
    
    
    
    
}
